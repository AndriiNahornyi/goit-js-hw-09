{"mappings":"iiBAYA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SACxBD,SAASC,cAAc,UACrBD,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBACrBD,SAASC,cAAc,mBAGtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUS,MAAAR,IAGpBG,EAAO,CAAEJ,WAAUS,MAAAR,MAEpBA,MAIPL,EAAKc,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBAKN,IAJA,IAAgCC,EAAAF,EAAMG,OAAOC,SAArCC,EAAwBH,EAAxBI,OAAQC,EAAgBL,EAAhBM,KAAMC,EAAUP,EAAVJ,MAClBY,EAAYC,OAAON,EAAOO,OAC1BC,EAAUF,OAAOJ,EAAKK,OACtBE,EAAWH,OAAOF,EAAMG,OACnBG,EAAI,EAAGA,EAAIL,EAAWK,GAAK,EAClC3B,EAAc2B,EAAE,EAAGD,GAChBE,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAU6B,EAAKD,EAALnB,MAEnBqB,EAAApC,GAASqC,OAAOC,QAAQ,uBAAwCC,OAAfjC,EAAS,QAAYiC,OAANJ,EAAM,UAErEK,OAAM,SAAAN,G,IAAG5B,EAAQ4B,EAAR5B,SAAUmC,EAAKP,EAALnB,MAElBqB,EAAApC,GAASqC,OAAOK,QAAQ,sBAAqCH,OAAfjC,EAAS,QAAYiC,OAANE,EAAM,UAEvEV,GAAYD,K","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мс, \n// крок збільшення затримки для кожного промісу після 1-го і кіл-ть промісів, яку необхідно створити.\n// Напиши скрипт, який на момент сабміту форми викликає ф-цію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, \n// враховуючи першу затримку(delay), введену користувачем, і крок(step).\n// Доповни код функції createPromise так, щоб вона повертала один проміс, який виконується \n// або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть\n// властивості position і delay зі значеннями однойменних параметрів. Використовуй \n// початковий код ф-ції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n// Optional: Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nimport Notiflix from 'notiflix';\n// Variables\nconst form = document.querySelector('.form');\nconst btn = document.querySelector('button');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\n// Functions\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n});\n};\n// Listeners\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const { amount, step, delay } = event.target.elements;\n  let amountVal = Number(amount.value);\n  let stepVal = Number(step.value);\n  let delayVal = Number(delay.value);\n  for (let i = 0; i < amountVal; i += 1) {\n    createPromise(i+1, delayVal)\n      .then(({ position, delay }) => {\n      // Optional: Notiflix\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => {\n      // Optional: Notiflix\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    delayVal += stepVal;\n  }\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","event","preventDefault","_elements","target","elements","amount1","amount","step1","step","delay2","amountVal","Number","value","stepVal","delayVal","i","then","param","delay3","$parcel$interopDefault","Notify","success","concat","catch","delay4","failure"],"version":3,"file":"03-promises.930cfe65.js.map"}