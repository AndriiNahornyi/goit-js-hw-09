{"mappings":"qhBAYA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SACxBD,SAASC,cAAc,UACrBD,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBACrBD,SAASC,cAAc,mBAGtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,EAAUS,MAAAR,IAGpBG,EAAO,C,SAAEJ,EAAUS,MAAAR,MAEpBA,MAIPL,EAAKc,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBACN,MAAQC,OAAAC,EAAQC,KAAAC,EAAMP,MAAAQ,GAAUN,EAAMO,OAAOC,SAC7C,IAAIC,EAAYC,OAAOP,EAAOQ,OAC1BC,EAAUF,OAAOL,EAAKM,OACtBE,EAAWH,OAAOJ,EAAMK,OAC5B,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAWK,GAAK,EAClC1B,EAAc0B,EAAE,EAAGD,GAChBE,MAAK,EAAC1B,SAAEA,EAAUS,MAAAkB,MAEnBC,EAAAlC,GAASmC,OAAOC,QAAQ,uBAAqB9B,QAAiB2B,UAE7DI,OAAM,EAAC/B,SAAEA,EAAUS,MAAAuB,MAElBJ,EAAAlC,GAASmC,OAAOI,QAAQ,sBAAoBjC,QAAegC,UAE/DR,GAAYD","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мс, \n// крок збільшення затримки для кожного промісу після 1-го і кіл-ть промісів, яку необхідно створити.\n// Напиши скрипт, який на момент сабміту форми викликає ф-цію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, \n// враховуючи першу затримку(delay), введену користувачем, і крок(step).\n// Доповни код функції createPromise так, щоб вона повертала один проміс, який виконується \n// або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть\n// властивості position і delay зі значеннями однойменних параметрів. Використовуй \n// початковий код ф-ції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n// Optional: Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nimport Notiflix from 'notiflix';\n// Variables\nconst form = document.querySelector('.form');\nconst btn = document.querySelector('button');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\n// Functions\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n});\n};\n// Listeners\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const { amount, step, delay } = event.target.elements;\n  let amountVal = Number(amount.value);\n  let stepVal = Number(step.value);\n  let delayVal = Number(delay.value);\n  for (let i = 0; i < amountVal; i += 1) {\n    createPromise(i+1, delayVal)\n      .then(({ position, delay }) => {\n      // Optional: Notiflix\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => {\n      // Optional: Notiflix\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    delayVal += stepVal;\n  }\n}"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","event","preventDefault","amount","amount1","step","step1","delay2","target","elements","amountVal","Number","value","stepVal","delayVal","i","then","delay3","$parcel$interopDefault","Notify","success","catch","delay4","failure"],"version":3,"file":"03-promises.7738e9f6.js.map"}